//
// Copyright 2011-2014 NimbusKit
//
// Autogenerated by flex using Jeff Verkoeyen's Markdown grammar
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#define YY_NO_INPUT

#include "MarkdownTokens.h"

#line 3 "lex.markdown.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE markdownrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via markdownrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void markdownrestart (FILE *input_file ,yyscan_t yyscanner );
void markdown_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void markdown_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdown_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void markdownpop_buffer_state (yyscan_t yyscanner );

static void markdownensure_buffer_stack (yyscan_t yyscanner );
static void markdown_load_buffer_state (yyscan_t yyscanner );
static void markdown_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER markdown_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE markdown_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE markdown_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *markdownalloc (yy_size_t ,yyscan_t yyscanner );
void *markdownrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void markdownfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer markdown_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        markdownensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 17
#define YY_END_OF_BUFFER 18
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[325] =
    {   0,
        0,    0,   18,   16,   15,   15,   14,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   14,    6,   16,   16,
        0,    0,   13,   14,    0,    0,    1,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    1,    0,    5,
        0,   14,    6,    6,   10,    0,    0,    0,    0,   13,
       12,   14,    1,    0,    1,    0,    0,    0,    0,    0,
        8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   14,    6,   11,    0,
        0,    7,    7,    0,    0,    0,    0,    0,    0,    2,
        8,    0,    8,    8,    0,    8,    8,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    2,    4,   14,    6,    2,
        2,    7,    0,    0,    0,    0,    0,    8,    0,    8,
        8,    8,    0,    8,    8,    8,    8,    0,    0,    0,
        0,    0,    8,    0,    0,    0,    0,    7,    0,    0,
        0,    0,    0,   14,    0,    0,    6,    0,    7,    3,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    0,    8,    8,    0,    0,    0,    9,    8,    8,
        0,    0,    7,    0,   14,    6,    3,    8,    8,    8,
        8,    0,    8,    8,    8,    8,    8,    0,    8,    8,

        8,    8,    8,    0,    8,    8,    8,    8,    0,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    0,    8,    8,    8,    8,    8,    8,    0,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    0,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    0,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    6,    7,    6,    6,    6,    6,    8,
        9,   10,    6,    6,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    6,    6,
       16,    6,    6,    6,   17,   17,   17,   17,   17,   18,
       19,   20,   19,   19,   19,   19,   19,   19,   19,   21,
       19,   19,   22,   23,   19,   19,   19,   19,   19,   19,
       24,   25,   26,    6,   27,   28,   17,   17,   17,   17,

       17,   29,   19,   30,   19,   19,   19,   19,   19,   19,
       19,   31,   19,   19,   32,   33,   19,   19,   19,   19,
       19,   19,    6,    6,    6,   34,    1,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,

       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35
    } ;

static yyconst flex_int32_t yy_meta[36] =
    {   0,
        1,    1,    1,    1,    2,    2,    2,    2,    2,    2,
        3,    4,    5,    3,    2,    6,    3,    3,    3,    3,
        3,    3,    3,    2,    3,    2,    2,    2,    3,    3,
        3,    3,    3,    2,    3
    } ;

static yyconst flex_int16_t yy_base[369] =
    {   0,
        0,   31,  628,  622,  621,  619,   34,   37,   47,   60,
       61,  615,   94,   82,   85,   83,   38,   84,   94,   32,
      613,   90,  606,   87,   97,  104,  100,  596,  121,  156,
      106,  122,   99,    0,  184,  101,  120,  145,  162,  163,
      127,  116,  604,  119,  588,  157,  159,  163,  181,  585,
      165,  175,  578,  570, 1808,  193,  190,  195,  204,  204,
      229,  264,  567,  292,  241,  207,  191,  258,  258,  536,
      274,  205,  273,  217,  176,  252,  300,  126,  559,  308,
      286, 1808,  541,  289,  535,  526,  312,  304,  308,  322,
      322,  357,  512,  376,  411,    0,  439,  351,  320,  228,

      314,  357,  254,  517,  492,  301,  363,  402,  482,  343,
      468,  407,  467,  361,  357,  375,  268,  419,  160,  488,
     1808,  478,  429,  474,  470,  435,  444,    0,  468,    0,
      496,    0,  525,  455,  553,  448,  448,  430,  461,  353,
      478,  480,  480,  494,  410,  581,  501,  422,  400,  390,
      447,  377,  449,  345,  380,  519,  209,  390,  372,  362,
        0,  609,  521,  530,    0,  637,  491,  535,  557,  170,
      319,  558,  560,  525,  576,  586,  666,  593,    0,  700,
      603,  616,  303,  300,  432,  313, 1808,  633,  692,  305,
      505,  694,  702,  637,  708,  710,  423,  716,  276,  744,

      724,  524,  772,  726,  791,  816,  851,  749,  751,  767,
      777,  550,  879,  786,  276,  843,  845,  590,  907,  859,
      861,  877,  884,  233,  926,  961,    0,  989,  886,  902,
      912,  921,  953,  955,  969,  971,  987,  994,  996, 1015,
     1040, 1075,  218, 1103, 1010, 1038, 1067, 1069, 1083, 1085,
     1105, 1110, 1112, 1119, 1126, 1145, 1180,  170, 1199, 1234,
        0, 1262, 1132, 1172, 1174, 1290, 1182, 1226, 1228, 1242,
     1244, 1260,    0, 1306,    0, 1334,    0, 1363,  137, 1391,
     1267, 1269, 1285, 1017, 1298, 1304, 1311, 1419,    0, 1434,
     1327,    0, 1462, 1329, 1343, 1356, 1361, 1149, 1490, 1369,

     1383, 1396, 1414, 1427, 1432, 1440, 1454, 1456, 1470, 1486,
     1491, 1493, 1499, 1507, 1509, 1515, 1517, 1523, 1525, 1531,
     1533, 1539, 1541, 1808, 1570, 1576, 1582, 1588, 1594, 1600,
     1606, 1612, 1618, 1624, 1630, 1636, 1642, 1648, 1654, 1660,
     1664, 1670, 1676, 1682, 1688, 1694, 1700,  113, 1705, 1711,
     1717, 1723, 1727,   86, 1732, 1736, 1740, 1744, 1749, 1754,
     1759, 1765, 1771, 1777, 1783, 1789, 1795, 1801
    } ;

static yyconst flex_int16_t yy_def[369] =
    {   0,
      324,    1,  324,  325,  325,  324,  325,  326,  324,    9,
        9,  327,  328,  329,  330,  325,  325,  331,    9,    9,
      325,  324,  324,  325,  326,  332,  333,    9,  325,  334,
        9,    9,  327,    9,    9,  329,  335,  336,  330,  330,
      337,  325,  331,  331,  325,    9,   29,    9,  324,  324,
      324,  325,  325,  332,  324,  332,  333,  338,  339,   29,
        9,  340,    9,    9,    9,    9,  327,  341,   35,  335,
      335,  336,  342,  343,  337,  337,  325,  331,  325,  325,
       60,  324,  332,  325,  338,  324,  338,  339,  344,  325,
       60,  345,   61,   91,  346,   61,   61,  341,   64,  325,

        9,    9,  347,   98,  348,   98,  349,   35,  335,  325,
      342,  342,  324,  343,  350,  325,  337,  325,  331,  325,
      324,  338,  325,  344,  324,  344,  325,   91,  351,   91,
       91,   94,  352,   61,   61,  353,   97,  354,   64,  325,
      347,  347,  353,  355,   98,   98,   35,  342,  325,  350,
      350,  324,  325,  325,  325,  325,  331,  324,  344,  325,
       91,   91,  356,  131,   94,   94,  143,  135,  143,  357,
      143,  358,   97,  356,  359,   64,  324,  347,  143,  143,
      146,   35,  350,  324,  325,  331,  324,  356,  162,  188,
      188,  360,  131,  357,  166,  135,  357,  361,  143,  143,

       97,  188,  188,   64,  177,  177,  362,  180,  146,   35,
      162,  188,  203,  131,  194,  166,  135,  194,  194,  200,
       97,  203,   64,  206,  177,  363,  206,  206,  180,  146,
      162,  213,  131,  166,  135,  219,  200,   97,  203,  177,
      206,  364,  206,  206,  228,  180,  146,  162,  213,  131,
      166,  135,  219,  200,  203,  241,  365,  241,  256,  366,
      241,  241,  244,  228,  180,   98,  162,  213,  166,  219,
      200,  203,  256,  367,  256,  256,  259,  368,  241,  241,
      262,  244,  228,  143,  213,  219,  200,  188,  256,  256,
      276,  259,  259,  280,  262,  244,  228,  288,  194,  290,

      276,  293,  280,  262,  244,  228,  290,  276,  293,  280,
      262,  244,  290,  276,  293,  280,  262,  290,  276,  293,
      280,  290,  293,    0,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324
    } ;

static yyconst flex_int16_t yy_nxt[1844] =
    {   0,
        4,    5,    6,    4,    7,    4,    4,    4,    4,    8,
        9,    4,    4,    9,    4,    4,    9,   10,    9,   11,
        9,    9,    9,   12,   13,    4,   14,   15,   10,   11,
        9,    9,    9,   16,    9,   17,   22,   18,   24,   26,
       22,   19,   42,   47,   20,   48,   27,   21,   21,   22,
       21,   21,   21,   21,   21,   21,   21,   28,   29,   21,
       28,   21,   21,   28,   28,   28,   28,   28,   28,   28,
       21,   30,   21,   21,   21,   28,   28,   28,   28,   28,
       21,   28,   31,   32,   37,   22,   22,   22,  174,   51,
       44,   52,   31,   32,   21,   21,   22,   21,   45,   26,

       49,   22,   58,   37,   46,   49,   53,   35,   38,   59,
       35,   35,   40,   55,   56,  143,   41,   60,   51,   56,
       77,   22,   35,   22,   67,   78,   65,   53,   22,   22,
       71,   61,  119,   60,   61,   71,   65,   61,   61,   61,
       61,   61,   61,   61,   66,   62,   55,   73,  240,   61,
       61,   61,   61,   61,   66,   61,   21,   21,   22,   21,
       76,   45,   22,   79,   22,   22,  157,   46,   60,   64,
       80,   74,   64,   64,   81,   49,   48,   51,   22,   52,
       49,  240,  170,   82,   64,   34,   68,   34,   34,   40,
       40,   49,   58,   22,  198,   83,   49,   69,  103,   84,

       69,   69,   55,   56,   86,   87,   89,   73,   56,   76,
       87,   22,   69,   90,   91,  186,   67,   91,   60,  115,
       91,   91,   91,   91,   91,   91,   91,  102,   92,  240,
       22,  110,   91,   91,   91,   91,   91,  102,   91,   93,
      140,   94,   93,  116,  240,   93,   93,   93,   93,   93,
       93,   93,   60,   95,   22,  100,   22,   93,   93,   93,
       93,   93,  101,   93,   21,   21,   22,   21,  104,  105,
       22,  108,  101,   49,  108,  108,  109,   97,   82,  142,
       97,   97,  107,  112,   71,  117,  108,  138,  112,   71,
       79,   22,   97,   63,   98,   63,   63,   80,  120,  113,

       55,  117,   51,   60,  118,   99,   89,   82,   99,   99,
       22,  106,   79,  123,  122,   22,  324,  125,  126,   80,
       99,   86,   87,  126,   22,   60,  187,   87,  100,  152,
      138,  127,  128,  139,   94,  128,  139,  139,  128,  128,
      128,  128,  128,  128,  128,   22,  129,   51,  139,  185,
      128,  128,  128,  128,  128,   22,  128,   21,   21,   22,
       21,  104,  138,  115,   22,  177,   49,  151,   60,  120,
      131,  100,  151,  131,  131,  107,  146,   22,  101,  146,
      146,  125,   22,  152,   45,  131,  132,  149,  101,  132,
      155,  146,  132,  132,  132,  132,  132,  132,  132,  187,

      133,  153,   22,  184,  132,  132,  132,  132,  132,  148,
      132,   21,   21,   22,   21,  147,  152,  112,  147,  147,
      106,   51,  112,  154,  135,  324,  153,  135,  135,  155,
      147,   22,  156,  113,   51,  170,   77,  159,  127,  135,
       96,  136,   96,   96,  125,  126,   22,  198,  113,  183,
      126,   22,  137,  160,  175,  137,  137,  151,  169,  105,
      170,  173,  151,   49,  173,  173,   60,  137,   21,   21,
       22,   21,  172,  152,  176,  160,  173,  176,  176,  158,
       22,  162,   22,  125,  162,  162,  178,   86,  178,  176,
       22,  105,  170,  121,  113,  324,  162,  130,  163,  130,

      130,  169,  138,  142,  172,  142,   49,  180,   55,  164,
      180,  180,  164,  164,  182,  191,  144,  182,  182,   82,
      324,   22,  180,   60,  164,   21,   21,   22,   21,  182,
       80,  190,  156,  170,  191,  121,   49,  170,  166,  324,
      324,  166,  166,  193,   86,  192,  193,  193,  196,  192,
       55,  196,  196,  166,  134,  167,  134,  134,  193,   82,
      191,   22,   55,  196,   60,  324,  168,  169,  138,  168,
      168,  200,   49,  201,  200,  200,  201,  201,   60,   55,
       22,  168,  145,  145,  145,  145,  200,   50,  201,  203,
       22,  106,  203,  203,  181,   22,  324,  181,  181,  204,

      197,  178,  204,  204,  203,  324,   22,   60,   50,  181,
      161,  188,  161,  161,  204,   22,  209,   22,  142,  209,
      209,   23,  189,   22,   22,  189,  189,  324,  324,  210,
      324,  209,  210,  210,  324,  324,  324,  189,  165,  194,
      165,  165,  324,  190,  210,  170,  324,  215,   49,  170,
      195,  324,   49,  195,  195,  324,  324,  192,  324,  324,
      324,  198,  324,  324,  324,  195,  205,  205,   22,  205,
       21,  205,  205,  205,  205,  205,  206,  205,  205,  206,
      205,  205,  206,  206,  206,  206,  206,  206,  206,  205,
      207,  205,  205,  205,  206,  206,  206,  206,  206,  205,

      206,  179,  179,  179,  179,  211,  324,  213,  211,  211,
      213,  213,  324,  208,  324,  214,  208,  208,  214,  214,
      211,  216,  213,  217,  216,  216,  217,  217,  208,  219,
      214,  324,  219,  219,  324,  324,  216,  221,  217,  223,
      221,  221,  223,  223,  219,  199,  199,  199,  199,  324,
      324,  324,  221,  324,  223,  138,  324,  220,  324,  324,
      220,  220,  229,  324,  230,  229,  229,  230,  230,  324,
      324,  324,  220,  202,  202,  202,  202,  229,  324,  230,
       28,  324,  191,   28,   28,  222,  324,  324,  222,  222,
      231,  324,  324,  231,  231,   28,  324,  324,  324,  233,

      222,  205,  233,  233,  205,  231,  324,  205,  205,  205,
      205,  205,  205,  205,  233,  205,  324,  324,  324,  205,
      205,  205,  205,  205,  324,  205,  224,  225,  324,  224,
      324,  324,  224,  224,  224,  224,  224,  224,  224,  324,
      226,  324,  324,  324,  224,  224,  224,  224,  224,  324,
      224,  205,  205,   22,  205,   34,  234,  324,  235,  234,
      234,  235,  235,  324,  228,  324,  324,  228,  228,  324,
      324,  234,  237,  235,  238,  237,  237,  238,  238,  228,
      212,  212,  212,  212,  324,  324,  324,  237,  324,  238,
      239,  324,  232,  239,  239,  232,  232,   28,  324,  246,

       28,   28,  246,  246,  324,  239,  324,  232,  218,  218,
      218,  218,   28,  324,  246,  247,  324,  197,  247,  247,
      236,  324,  324,  236,  236,  248,  324,  324,  248,  248,
      247,  324,  324,  324,  249,  236,  241,  249,  249,  241,
      248,  324,  241,  241,  241,  241,  241,  241,  241,  249,
      242,  324,  324,  324,  241,  241,  241,  241,  241,  324,
      241,  205,  205,   22,  205,   63,  250,  324,  251,  250,
      250,  251,  251,  324,  244,  324,  324,  244,  244,  324,
      324,  250,  252,  251,  253,  252,  252,  253,  253,  244,
      227,   68,  227,   34,  324,  324,  324,  252,  324,  253,

      254,  324,  245,  254,  254,  245,  245,   93,  324,  255,
       93,   93,  255,  255,  324,  254,  324,  245,  179,  179,
      179,  179,   93,  264,  255,  256,  264,  264,  256,  324,
      324,  256,  256,  256,  256,  256,  256,  256,  264,  257,
      324,  324,  324,  256,  256,  256,  256,  256,  324,  256,
      258,  265,  259,  258,  265,  265,  258,  258,  258,  258,
      258,  258,  258,  324,  260,  324,  265,  324,  258,  258,
      258,  258,  258,  324,  258,  205,  205,   22,  205,   96,
      266,  324,  267,  266,  266,  267,  267,  324,  262,  324,
      324,  262,  262,  324,  324,  266,  268,  267,  128,  268,

      268,  128,  128,  262,  243,   98,  243,   63,  324,  324,
      324,  268,  324,  128,  240,  324,  263,  324,  269,  263,
      263,  269,  269,   93,  324,  270,   93,   93,  270,  270,
      324,  263,  271,  269,  324,  271,  271,  324,   93,  272,
      270,  324,  272,  272,  324,  282,  324,  271,  282,  282,
      212,  212,  212,  212,  272,  273,  205,  324,  273,  324,
      282,  273,  273,  273,  273,  273,  273,  273,  324,  274,
      324,  324,  324,  273,  273,  273,  273,  273,  324,  273,
      205,  205,   22,  205,  130,  283,  324,  284,  283,  283,
      284,  284,  324,  276,  324,  128,  276,  276,  128,  128,

      283,  324,  284,  324,  324,  324,  324,  324,  276,  277,
      128,  324,  277,  324,  324,  277,  277,  277,  277,  277,
      277,  277,  324,  278,  324,  324,  324,  277,  277,  277,
      277,  277,  324,  277,  205,  205,   22,  205,  134,  285,
      324,  132,  285,  285,  132,  132,  324,  280,  324,  324,
      280,  280,  324,  324,  285,  286,  132,  287,  286,  286,
      287,  287,  280,  261,  136,  261,   96,  324,  324,  324,
      286,  324,  287,  288,  324,  281,  288,  288,  281,  281,
      295,  324,  296,  295,  295,  296,  296,  324,  288,  324,
      281,  145,  145,  145,  145,  295,  324,  296,  297,  324,

      106,  297,  297,  324,  324,  324,  205,  205,   22,  205,
      161,  298,  324,  297,  298,  298,  324,  299,  324,  290,
      299,  299,  290,  290,  171,  324,  298,  171,  171,  324,
      324,  324,  299,  324,  290,  275,  163,  275,  130,  171,
      301,  324,  303,  301,  301,  303,  303,  291,  324,  324,
      291,  291,  324,  324,  324,  301,  304,  303,  324,  304,
      304,  324,  291,  205,  205,   22,  205,  165,  324,  305,
      324,  304,  305,  305,  306,  324,  293,  306,  306,  293,
      293,  324,  307,  324,  305,  307,  307,  324,  324,  306,
      324,  293,  279,  167,  279,  134,  308,  307,  324,  308,

      308,  324,  240,  324,  294,  324,  324,  294,  294,  309,
      324,  308,  309,  309,  324,  324,  324,  324,  324,  294,
      202,  202,  202,  202,  309,  324,  324,  310,  324,  191,
      310,  310,  324,  324,  324,  289,  188,  289,  161,  324,
      311,  324,  310,  311,  311,  312,  324,  300,  312,  312,
      300,  300,  324,  224,  324,  311,  224,  224,  324,  324,
      312,  324,  300,  292,  194,  292,  165,  313,  224,  314,
      313,  313,  314,  314,  324,  302,  324,  324,  302,  302,
      324,  324,  313,  315,  314,  324,  315,  315,  324,  324,
      302,  218,  218,  218,  218,  324,  324,  324,  315,  316,

      197,  324,  316,  316,  317,  324,  224,  317,  317,  224,
      224,  324,  318,  324,  316,  318,  318,  324,  324,  317,
      319,  224,  320,  319,  319,  320,  320,  318,  321,  324,
      258,  321,  321,  258,  258,  319,  322,  320,  273,  322,
      322,  273,  273,  321,  323,  258,  258,  323,  323,  258,
      258,  322,  273,  273,  277,  273,  273,  277,  277,  323,
      324,  258,  324,  324,  324,  324,  324,  273,  324,  277,
       21,   21,   21,   21,   21,   21,   25,   25,   25,   25,
       25,   25,   33,   33,   33,   33,   33,   33,   34,   34,
       34,   34,   34,   34,   36,   36,   36,   36,   36,   36,

       39,   39,   39,   39,   39,   39,   43,   43,   43,   43,
       43,   43,   54,   54,   54,   54,   54,   54,   57,   57,
       57,   57,   57,   57,   63,   63,   63,   63,   63,   63,
       70,   70,   70,   70,   70,   70,   72,   72,   72,   72,
       72,   72,   75,   75,   75,   75,   75,   75,   85,   85,
       85,   85,   85,   85,   88,   88,   88,   88,   88,   88,
       96,   96,   96,   96,   96,   96,  106,  106,  324,  106,
      111,  111,  111,  111,  111,  111,  114,  114,  114,  114,
      114,  114,  124,  124,  124,  124,  124,  124,  130,  130,
      130,  130,  130,  130,  134,  134,  134,  134,  134,  134,

      141,  141,  141,  141,  141,  141,  145,  145,  145,  145,
      145,  150,  150,  150,  150,  150,  150,  161,  161,  161,
      161,  161,  161,  165,  165,  165,  165,  165,  165,  171,
      171,  171,  171,  179,  179,  179,  179,  179,  191,  324,
      191,  191,  197,  324,  197,  199,  199,  199,  199,  199,
      202,  202,  202,  202,  202,  212,  212,  212,  212,  212,
      218,  218,  218,  218,  218,  227,  227,  227,  227,  227,
      227,  243,  243,  243,  243,  243,  243,  261,  261,  261,
      261,  261,  261,  275,  275,  275,  275,  275,  275,  279,
      279,  279,  279,  279,  279,  289,  289,  289,  289,  289,

      289,  292,  292,  292,  292,  292,  292,    3,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324
    } ;

static yyconst flex_int16_t yy_chk[1844] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    7,    2,    7,    8,
       17,    2,   17,   20,    2,   20,    8,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   10,   11,   14,   16,   18,   15,  354,   24,
       18,   24,   10,   11,   13,   13,   13,   13,   19,   25,

       22,   33,   27,   36,   19,   22,   25,   13,   14,   27,
       13,   13,   15,   26,   26,  348,   16,   31,   42,   26,
       42,   44,   13,   29,   33,   44,   31,   36,   78,   41,
       37,   29,   78,   32,   29,   37,   31,   29,   29,   29,
       29,   29,   29,   29,   32,   29,   37,   38,  279,   29,
       29,   29,   29,   29,   32,   29,   30,   30,   30,   30,
       41,   46,  119,   47,   39,   40,  119,   46,   46,   30,
       47,   38,   30,   30,   48,   51,   48,   52,   75,   52,
       51,  258,  170,   49,   30,   35,   35,   35,   35,   39,
       40,   49,   57,   67,  170,   56,   49,   35,   67,   57,

       35,   35,   56,   56,   58,   58,   59,   72,   56,   75,
       58,  157,   35,   59,   60,  157,   67,   60,   66,   74,
       60,   60,   60,   60,   60,   60,   60,   66,   60,  243,
      100,   72,   60,   60,   60,   60,   60,   66,   60,   61,
      100,   61,   61,   74,  224,   61,   61,   61,   61,   61,
       61,   61,   65,   61,   76,   65,  103,   61,   61,   61,
       61,   61,   65,   61,   62,   62,   62,   62,   68,   68,
      117,   69,   65,   68,   69,   69,   71,   62,  215,  103,
       62,   62,   68,   73,   71,   76,   69,  199,   73,   71,
       81,   84,   62,   64,   64,   64,   64,   81,   84,   73,

       71,  117,   77,   64,   77,   64,   88,  190,   64,   64,
       80,  106,   80,   88,   87,  186,  106,   89,   89,   80,
       64,   87,   87,   89,   90,  101,  184,   87,  101,  183,
      171,   90,   91,   99,   91,   91,   99,   99,   91,   91,
       91,   91,   91,   91,   91,  110,   91,  154,   99,  154,
       91,   91,   91,   91,   91,  140,   91,   92,   92,   92,
       92,   98,   98,  114,  160,  140,   98,  115,  102,  110,
       92,  102,  115,   92,   92,   98,  107,  116,  102,  107,
      107,  159,  155,  115,  155,   92,   94,  114,  102,   94,
      155,  107,   94,   94,   94,   94,   94,   94,   94,  158,

       94,  116,  149,  152,   94,   94,   94,   94,   94,  112,
       94,   95,   95,   95,   95,  108,  150,  112,  108,  108,
      145,  118,  112,  118,   95,  145,  149,   95,   95,  118,
      108,  123,  118,  112,  185,  197,  185,  126,  123,   95,
       97,   97,   97,   97,  126,  126,  127,  197,  148,  151,
      126,  153,   97,  127,  138,   97,   97,  151,  136,  136,
      136,  137,  151,  136,  137,  137,  134,   97,  129,  129,
      129,  129,  136,  151,  139,  153,  137,  139,  139,  125,
      141,  129,  142,  124,  129,  129,  141,  122,  142,  139,
      120,  143,  143,  113,  111,  143,  129,  131,  131,  131,

      131,  167,  167,  141,  143,  142,  167,  144,  109,  131,
      144,  144,  131,  131,  147,  191,  105,  147,  147,  104,
      191,  156,  144,   93,  131,  133,  133,  133,  133,  147,
      156,  163,  156,  163,  202,   86,  163,  174,  133,  202,
      174,  133,  133,  164,   85,  163,  164,  164,  168,  174,
       83,  168,  168,  133,  135,  135,  135,  135,  164,  169,
      212,   79,   70,  168,  135,  212,  135,  169,  169,  135,
      135,  172,  169,  173,  172,  172,  173,  173,   63,   54,
       53,  135,  146,  146,  146,  146,  172,   50,  173,  175,
       45,  146,  175,  175,  146,  178,  146,  146,  146,  176,

      218,  178,  176,  176,  175,  218,   43,   28,   23,  146,
      162,  162,  162,  162,  176,   21,  181,   12,  178,  181,
      181,    6,  162,    5,    4,  162,  162,    3,    0,  182,
        0,  181,  182,  182,    0,    0,    0,  162,  166,  166,
      166,  166,    0,  188,  182,  188,    0,  194,  188,  194,
      166,    0,  194,  166,  166,    0,    0,  188,    0,    0,
        0,  194,    0,    0,    0,  166,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,

      177,  180,  180,  180,  180,  189,    0,  192,  189,  189,
      192,  192,    0,  180,    0,  193,  180,  180,  193,  193,
      189,  195,  192,  196,  195,  195,  196,  196,  180,  198,
      193,    0,  198,  198,    0,    0,  195,  201,  196,  204,
      201,  201,  204,  204,  198,  200,  200,  200,  200,    0,
        0,    0,  201,    0,  204,  200,    0,  200,    0,    0,
      200,  200,  208,    0,  209,  208,  208,  209,  209,    0,
        0,    0,  200,  203,  203,  203,  203,  208,    0,  209,
      210,    0,  203,  210,  210,  203,    0,  203,  203,  203,
      211,    0,    0,  211,  211,  210,    0,    0,    0,  214,

      203,  205,  214,  214,  205,  211,    0,  205,  205,  205,
      205,  205,  205,  205,  214,  205,    0,    0,    0,  205,
      205,  205,  205,  205,    0,  205,  206,  206,    0,  206,
        0,    0,  206,  206,  206,  206,  206,  206,  206,    0,
      206,    0,    0,    0,  206,  206,  206,  206,  206,    0,
      206,  207,  207,  207,  207,  207,  216,    0,  217,  216,
      216,  217,  217,    0,  207,    0,    0,  207,  207,    0,
        0,  216,  220,  217,  221,  220,  220,  221,  221,  207,
      213,  213,  213,  213,    0,    0,    0,  220,    0,  221,
      222,    0,  213,  222,  222,  213,  213,  223,    0,  229,

      223,  223,  229,  229,    0,  222,    0,  213,  219,  219,
      219,  219,  223,    0,  229,  230,    0,  219,  230,  230,
      219,    0,  219,  219,  219,  231,    0,    0,  231,  231,
      230,    0,    0,    0,  232,  219,  225,  232,  232,  225,
      231,    0,  225,  225,  225,  225,  225,  225,  225,  232,
      225,    0,    0,    0,  225,  225,  225,  225,  225,    0,
      225,  226,  226,  226,  226,  226,  233,    0,  234,  233,
      233,  234,  234,    0,  226,    0,    0,  226,  226,    0,
        0,  233,  235,  234,  236,  235,  235,  236,  236,  226,
      228,  228,  228,  228,    0,    0,    0,  235,    0,  236,

      237,    0,  228,  237,  237,  228,  228,  238,    0,  239,
      238,  238,  239,  239,    0,  237,    0,  228,  284,  284,
      284,  284,  238,  245,  239,  240,  245,  245,  240,    0,
        0,  240,  240,  240,  240,  240,  240,  240,  245,  240,
        0,    0,    0,  240,  240,  240,  240,  240,    0,  240,
      241,  246,  241,  241,  246,  246,  241,  241,  241,  241,
      241,  241,  241,    0,  241,    0,  246,    0,  241,  241,
      241,  241,  241,    0,  241,  242,  242,  242,  242,  242,
      247,    0,  248,  247,  247,  248,  248,    0,  242,    0,
        0,  242,  242,    0,    0,  247,  249,  248,  250,  249,

      249,  250,  250,  242,  244,  244,  244,  244,    0,    0,
        0,  249,    0,  250,  244,    0,  244,    0,  251,  244,
      244,  251,  251,  252,    0,  253,  252,  252,  253,  253,
        0,  244,  254,  251,    0,  254,  254,    0,  252,  255,
      253,    0,  255,  255,    0,  263,    0,  254,  263,  263,
      298,  298,  298,  298,  255,  256,  256,    0,  256,    0,
      263,  256,  256,  256,  256,  256,  256,  256,    0,  256,
        0,    0,    0,  256,  256,  256,  256,  256,    0,  256,
      257,  257,  257,  257,  257,  264,    0,  265,  264,  264,
      265,  265,    0,  257,    0,  267,  257,  257,  267,  267,

      264,    0,  265,    0,    0,    0,    0,    0,  257,  259,
      267,    0,  259,    0,    0,  259,  259,  259,  259,  259,
      259,  259,    0,  259,    0,    0,    0,  259,  259,  259,
      259,  259,    0,  259,  260,  260,  260,  260,  260,  268,
        0,  269,  268,  268,  269,  269,    0,  260,    0,    0,
      260,  260,    0,    0,  268,  270,  269,  271,  270,  270,
      271,  271,  260,  262,  262,  262,  262,    0,    0,    0,
      270,    0,  271,  272,    0,  262,  272,  272,  262,  262,
      281,    0,  282,  281,  281,  282,  282,    0,  272,    0,
      262,  266,  266,  266,  266,  281,    0,  282,  283,    0,

      266,  283,  283,    0,    0,  266,  274,  274,  274,  274,
      274,  285,    0,  283,  285,  285,    0,  286,    0,  274,
      286,  286,  274,  274,  287,    0,  285,  287,  287,    0,
        0,    0,  286,    0,  274,  276,  276,  276,  276,  287,
      291,    0,  294,  291,  291,  294,  294,  276,    0,    0,
      276,  276,    0,    0,    0,  291,  295,  294,    0,  295,
      295,    0,  276,  278,  278,  278,  278,  278,    0,  296,
        0,  295,  296,  296,  297,    0,  278,  297,  297,  278,
      278,    0,  300,    0,  296,  300,  300,    0,    0,  297,
        0,  278,  280,  280,  280,  280,  301,  300,    0,  301,

      301,    0,  280,    0,  280,    0,    0,  280,  280,  302,
        0,  301,  302,  302,    0,    0,    0,    0,    0,  280,
      288,  288,  288,  288,  302,    0,    0,  303,    0,  288,
      303,  303,    0,    0,  288,  290,  290,  290,  290,    0,
      304,    0,  303,  304,  304,  305,    0,  290,  305,  305,
      290,  290,    0,  306,    0,  304,  306,  306,    0,    0,
      305,    0,  290,  293,  293,  293,  293,  307,  306,  308,
      307,  307,  308,  308,    0,  293,    0,    0,  293,  293,
        0,    0,  307,  309,  308,    0,  309,  309,    0,    0,
      293,  299,  299,  299,  299,    0,    0,    0,  309,  310,

      299,    0,  310,  310,  311,  299,  312,  311,  311,  312,
      312,    0,  313,    0,  310,  313,  313,    0,    0,  311,
      314,  312,  315,  314,  314,  315,  315,  313,  316,    0,
      317,  316,  316,  317,  317,  314,  318,  315,  319,  318,
      318,  319,  319,  316,  320,  317,  321,  320,  320,  321,
      321,  318,  322,  319,  323,  322,  322,  323,  323,  320,
        0,  321,    0,    0,    0,    0,    0,  322,    0,  323,
      325,  325,  325,  325,  325,  325,  326,  326,  326,  326,
      326,  326,  327,  327,  327,  327,  327,  327,  328,  328,
      328,  328,  328,  328,  329,  329,  329,  329,  329,  329,

      330,  330,  330,  330,  330,  330,  331,  331,  331,  331,
      331,  331,  332,  332,  332,  332,  332,  332,  333,  333,
      333,  333,  333,  333,  334,  334,  334,  334,  334,  334,
      335,  335,  335,  335,  335,  335,  336,  336,  336,  336,
      336,  336,  337,  337,  337,  337,  337,  337,  338,  338,
      338,  338,  338,  338,  339,  339,  339,  339,  339,  339,
      340,  340,  340,  340,  340,  340,  341,  341,    0,  341,
      342,  342,  342,  342,  342,  342,  343,  343,  343,  343,
      343,  343,  344,  344,  344,  344,  344,  344,  345,  345,
      345,  345,  345,  345,  346,  346,  346,  346,  346,  346,

      347,  347,  347,  347,  347,  347,  349,  349,  349,  349,
      349,  350,  350,  350,  350,  350,  350,  351,  351,  351,
      351,  351,  351,  352,  352,  352,  352,  352,  352,  353,
      353,  353,  353,  355,  355,  355,  355,  355,  356,    0,
      356,  356,  357,    0,  357,  358,  358,  358,  358,  358,
      359,  359,  359,  359,  359,  360,  360,  360,  360,  360,
      361,  361,  361,  361,  361,  362,  362,  362,  362,  362,
      362,  363,  363,  363,  363,  363,  363,  364,  364,  364,
      364,  364,  364,  365,  365,  365,  365,  365,  365,  366,
      366,  366,  366,  366,  366,  367,  367,  367,  367,  367,

      367,  368,  368,  368,  368,  368,  368,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "markdown.grammar"
#line 949 "lex.markdown.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int markdownlex_init (yyscan_t* scanner);

int markdownlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int markdownlex_destroy (yyscan_t yyscanner );

int markdownget_debug (yyscan_t yyscanner );

void markdownset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE markdownget_extra (yyscan_t yyscanner );

void markdownset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *markdownget_in (yyscan_t yyscanner );

void markdownset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *markdownget_out (yyscan_t yyscanner );

void markdownset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t markdownget_leng (yyscan_t yyscanner );

char *markdownget_text (yyscan_t yyscanner );

int markdownget_lineno (yyscan_t yyscanner );

void markdownset_lineno (int line_number ,yyscan_t yyscanner );

int markdownget_column  (yyscan_t yyscanner );

void markdownset_column (int column_no ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int markdownwrap (yyscan_t yyscanner );
#else
extern int markdownwrap (yyscan_t yyscanner );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int markdownlex (yyscan_t yyscanner);

#define YY_DECL int markdownlex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 41 "markdown.grammar"


#line 1178 "lex.markdown.c"

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			markdownensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		markdown_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 325 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1808 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 43 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNEM, yyscanner);}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 44 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONG, yyscanner);}
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 45 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRONGEM, yyscanner);}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 46 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNSTRIKETHROUGH, yyscanner);}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 47 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNCODESPAN, yyscanner);}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 48 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHEADER, yyscanner);}
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 49 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNMULTILINEHEADER, yyscanner);}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 50 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNURL, yyscanner);}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 51 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNHREF, yyscanner);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 52 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNBULLETSTART, yyscanner);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 53 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNLISTSTART, yyscanner);}
	YY_BREAK
case 12:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 55 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNNEWLINE, yyscanner);}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 56 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNPARAGRAPH, yyscanner);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 57 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNWHITESPACE, yyscanner);}
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 58 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNWHITESPACE, yyscanner);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "markdown.grammar"
{markdownConsume(yytext, MARKDOWNUNKNOWN, yyscanner);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 62 "markdown.grammar"
ECHO;
	YY_BREAK
#line 1357 "lex.markdown.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * markdownlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( markdownwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of markdownlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					markdownrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			markdownrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) markdownrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 325 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 325 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 324);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					markdownrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( markdownwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void markdownrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        markdownensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            markdown_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	markdown_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	markdown_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void markdown_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		markdownpop_buffer_state();
	 *		markdownpush_buffer_state(new_buffer);
     */
	markdownensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	markdown_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (markdownwrap()) processing, but the only time this flag
	 * is looked at is after markdownwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void markdown_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE markdown_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) markdownalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_create_buffer()" );

	b->yy_is_our_buffer = 1;

	markdown_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with markdown_create_buffer()
 * @param yyscanner The scanner object.
 */
    void markdown_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		markdownfree((void *) b->yy_ch_buf ,yyscanner );

	markdownfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a markdownrestart() or at EOF.
 */
    static void markdown_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	markdown_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then markdown_init_buffer was _probably_
     * called from markdownrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void markdown_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		markdown_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void markdownpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	markdownensure_buffer_stack(yyscanner);

	/* This block is copied from markdown_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from markdown_switch_to_buffer. */
	markdown_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void markdownpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		markdown_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void markdownensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)markdownrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in markdownensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE markdown_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) markdownalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	markdown_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to markdownlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       markdown_scan_bytes() instead.
 */
YY_BUFFER_STATE markdown_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return markdown_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to markdownlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE markdown_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) markdownalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in markdown_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = markdown_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in markdown_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE markdownget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int markdownget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int markdownget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *markdownget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t markdownget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *markdownget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void markdownset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "markdownset_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void markdownset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "markdownset_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see markdown_switch_to_buffer
 */
void markdownset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void markdownset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int markdownget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void markdownset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* markdownlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int markdownlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* markdownlex_init_extra has the same functionality as markdownlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to markdownalloc in
 * the yyextra field.
 */

int markdownlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    markdownset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) markdownalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    markdownset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from markdownlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * markdownlex_init()
     */
    return 0;
}

/* markdownlex_destroy is for both reentrant and non-reentrant scanners. */
int markdownlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		markdown_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		markdownpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	markdownfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        markdownfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * markdownlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    markdownfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *markdownalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *markdownrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void markdownfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see markdownrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 62 "markdown.grammar"



int markdownwrap(yyscan_t yyscanner){return 1;}

